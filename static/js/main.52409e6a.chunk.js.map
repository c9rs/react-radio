{"version":3,"sources":["Radio.js","App.js","serviceWorker.js","index.js"],"names":["Radio","_this","this","react_default","a","createElement","className","type","checked","props","selected","value","option","onChange","e","display","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedOption","radioButtons","count","_this2","map","button","src_Radio_0","key","handleChange","setState","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAoBeA,0LAhBF,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,QACRC,QAASN,KAAKO,MAAMC,SACpBC,MAAOT,KAAKO,MAAMG,OAAOD,MACzBE,SAAU,SAACC,GAAD,OAAOb,EAAKQ,MAAMI,SAASZ,EAAKQ,MAAMG,OAAOD,MAAOG,MAClEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,YAAOH,KAAKO,MAAMG,OAAOG,kBAVzBC,IAAMC,YCmDXC,qBAjDb,SAAAA,EAAYT,GAAO,IAAAR,EAAA,OAAAkB,OAAAC,EAAA,EAAAD,CAAAjB,KAAAgB,IACjBjB,EAAAkB,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAArB,KAAMO,KACDe,MAAQ,CACXC,eAAgB,KAChBC,aAAc,CACZ,CACEX,QAAS,MACTJ,MAAO,cAET,CACEI,QAAS,OACTJ,MAAO,YAET,CACEI,QAAS,QACTJ,MAAO,cAGXgB,MAAO,GAlBQ1B,wEAsBV,IAAA2B,EAAA1B,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZJ,KAAKsB,MAAME,aAAaG,IAAI,SAAAC,GAAM,OACjC3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEC,IAAKF,EAAOnB,MACZC,OAAQkB,EACRjB,SAAU,SAACF,EAAOG,GAAR,OAAcc,EAAKK,aAAatB,EAAOG,IACjDJ,SAAUkB,EAAKJ,MAAMC,iBAAmBK,EAAOnB,UAInDR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAOH,KAAKsB,MAAMG,8CAMbhB,EAAOG,GAClBZ,KAAKgC,SAAS,CACZT,eAAgBd,EAChBgB,MAAOzB,KAAKsB,MAAMG,MAAQ,WA7CdX,IAAMC,YCQJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52409e6a.chunk.js","sourcesContent":["import React from 'react';\nimport './Radio.scss'\n\nclass Radio extends React.Component {\n    render() {\n        return (\n            <div className=\"zest-radio-wrapper disable-highlight\" >\n                <label className=\"zest-radio-label\" >\n                    <input type=\"radio\"\n                        checked={this.props.selected}\n                        value={this.props.option.value} \n                        onChange={(e) => this.props.onChange(this.props.option.value, e)} />\n                    <div className=\"zest-radio\"></div>\n                    <span>{this.props.option.display}</span>\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default Radio;","import React from 'react';\nimport Radio from './Radio';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: null,\n      radioButtons: [\n        {\n          display: 'red',\n          value: 'charmander'\n        },\n        {\n          display: 'blue',\n          value: 'squirtle'\n        },\n        {\n          display: 'green',\n          value: 'bulbasaur'\n        }\n      ],\n      count: 0\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.radioButtons.map(button => (\n          <Radio\n            key={button.value}\n            option={button}\n            onChange={(value, e) => this.handleChange(value, e)}\n            selected={this.state.selectedOption === button.value} \n          />\n        ))}\n\n        <div>\n          <span>{this.state.count}</span>\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(value, e) {\n    this.setState({\n      selectedOption: value,\n      count: this.state.count + 1\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}